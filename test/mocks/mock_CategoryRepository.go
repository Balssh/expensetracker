// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "expense-tracker/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockCategoryRepository is an autogenerated mock type for the CategoryRepository type
type MockCategoryRepository struct {
	mock.Mock
}

type MockCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryRepository) EXPECT() *MockCategoryRepository_Expecter {
	return &MockCategoryRepository_Expecter{mock: &_m.Mock}
}

// CreateCategory provides a mock function with given fields: ctx, category, categoryType
func (_m *MockCategoryRepository) CreateCategory(ctx context.Context, category *domain.Category, categoryType string) error {
	ret := _m.Called(ctx, category, categoryType)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Category, string) error); ok {
		r0 = rf(ctx, category, categoryType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCategoryRepository_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type MockCategoryRepository_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category *domain.Category
//   - categoryType string
func (_e *MockCategoryRepository_Expecter) CreateCategory(ctx interface{}, category interface{}, categoryType interface{}) *MockCategoryRepository_CreateCategory_Call {
	return &MockCategoryRepository_CreateCategory_Call{Call: _e.mock.On("CreateCategory", ctx, category, categoryType)}
}

func (_c *MockCategoryRepository_CreateCategory_Call) Run(run func(ctx context.Context, category *domain.Category, categoryType string)) *MockCategoryRepository_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Category), args[2].(string))
	})
	return _c
}

func (_c *MockCategoryRepository_CreateCategory_Call) Return(_a0 error) *MockCategoryRepository_CreateCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryRepository_CreateCategory_Call) RunAndReturn(run func(context.Context, *domain.Category, string) error) *MockCategoryRepository_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategories provides a mock function with given fields: ctx, categoryType
func (_m *MockCategoryRepository) GetCategories(ctx context.Context, categoryType string) ([]*domain.Category, error) {
	ret := _m.Called(ctx, categoryType)

	if len(ret) == 0 {
		panic("no return value specified for GetCategories")
	}

	var r0 []*domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Category, error)); ok {
		return rf(ctx, categoryType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Category); ok {
		r0 = rf(ctx, categoryType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, categoryType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryRepository_GetCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategories'
type MockCategoryRepository_GetCategories_Call struct {
	*mock.Call
}

// GetCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - categoryType string
func (_e *MockCategoryRepository_Expecter) GetCategories(ctx interface{}, categoryType interface{}) *MockCategoryRepository_GetCategories_Call {
	return &MockCategoryRepository_GetCategories_Call{Call: _e.mock.On("GetCategories", ctx, categoryType)}
}

func (_c *MockCategoryRepository_GetCategories_Call) Run(run func(ctx context.Context, categoryType string)) *MockCategoryRepository_GetCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCategoryRepository_GetCategories_Call) Return(_a0 []*domain.Category, _a1 error) *MockCategoryRepository_GetCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryRepository_GetCategories_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Category, error)) *MockCategoryRepository_GetCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategoryByID provides a mock function with given fields: ctx, id, categoryType
func (_m *MockCategoryRepository) GetCategoryByID(ctx context.Context, id int, categoryType string) (*domain.Category, error) {
	ret := _m.Called(ctx, id, categoryType)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoryByID")
	}

	var r0 *domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*domain.Category, error)); ok {
		return rf(ctx, id, categoryType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *domain.Category); ok {
		r0 = rf(ctx, id, categoryType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, id, categoryType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryRepository_GetCategoryByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategoryByID'
type MockCategoryRepository_GetCategoryByID_Call struct {
	*mock.Call
}

// GetCategoryByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - categoryType string
func (_e *MockCategoryRepository_Expecter) GetCategoryByID(ctx interface{}, id interface{}, categoryType interface{}) *MockCategoryRepository_GetCategoryByID_Call {
	return &MockCategoryRepository_GetCategoryByID_Call{Call: _e.mock.On("GetCategoryByID", ctx, id, categoryType)}
}

func (_c *MockCategoryRepository_GetCategoryByID_Call) Run(run func(ctx context.Context, id int, categoryType string)) *MockCategoryRepository_GetCategoryByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockCategoryRepository_GetCategoryByID_Call) Return(_a0 *domain.Category, _a1 error) *MockCategoryRepository_GetCategoryByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryRepository_GetCategoryByID_Call) RunAndReturn(run func(context.Context, int, string) (*domain.Category, error)) *MockCategoryRepository_GetCategoryByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCategoryRepository creates a new instance of MockCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryRepository {
	mock := &MockCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
