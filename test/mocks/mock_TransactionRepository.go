// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "expense-tracker/internal/core/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, transaction
func (_m *MockTransactionRepository) Create(ctx context.Context, transaction *domain.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *domain.Transaction
func (_e *MockTransactionRepository_Expecter) Create(ctx interface{}, transaction interface{}) *MockTransactionRepository_Create_Call {
	return &MockTransactionRepository_Create_Call{Call: _e.mock.On("Create", ctx, transaction)}
}

func (_c *MockTransactionRepository_Create_Call) Run(run func(ctx context.Context, transaction *domain.Transaction)) *MockTransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_Create_Call) Return(_a0 error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.Transaction) error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockTransactionRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTransactionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockTransactionRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockTransactionRepository_Delete_Call {
	return &MockTransactionRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTransactionRepository_Delete_Call) Run(run func(ctx context.Context, id int)) *MockTransactionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockTransactionRepository_Delete_Call) Return(_a0 error) *MockTransactionRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_Delete_Call) RunAndReturn(run func(context.Context, int) error) *MockTransactionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, offset, limit
func (_m *MockTransactionRepository) GetAll(ctx context.Context, offset int, limit int) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*domain.Transaction, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*domain.Transaction); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockTransactionRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
func (_e *MockTransactionRepository_Expecter) GetAll(ctx interface{}, offset interface{}, limit interface{}) *MockTransactionRepository_GetAll_Call {
	return &MockTransactionRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, offset, limit)}
}

func (_c *MockTransactionRepository_GetAll_Call) Run(run func(ctx context.Context, offset int, limit int)) *MockTransactionRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockTransactionRepository_GetAll_Call) Return(_a0 []*domain.Transaction, _a1 error) *MockTransactionRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_GetAll_Call) RunAndReturn(run func(context.Context, int, int) ([]*domain.Transaction, error)) *MockTransactionRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDateRange provides a mock function with given fields: ctx, start, end
func (_m *MockTransactionRepository) GetByDateRange(ctx context.Context, start time.Time, end time.Time) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetByDateRange")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]*domain.Transaction, error)); ok {
		return rf(ctx, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []*domain.Transaction); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDateRange'
type MockTransactionRepository_GetByDateRange_Call struct {
	*mock.Call
}

// GetByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
func (_e *MockTransactionRepository_Expecter) GetByDateRange(ctx interface{}, start interface{}, end interface{}) *MockTransactionRepository_GetByDateRange_Call {
	return &MockTransactionRepository_GetByDateRange_Call{Call: _e.mock.On("GetByDateRange", ctx, start, end)}
}

func (_c *MockTransactionRepository_GetByDateRange_Call) Run(run func(ctx context.Context, start time.Time, end time.Time)) *MockTransactionRepository_GetByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *MockTransactionRepository_GetByDateRange_Call) Return(_a0 []*domain.Transaction, _a1 error) *MockTransactionRepository_GetByDateRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_GetByDateRange_Call) RunAndReturn(run func(context.Context, time.Time, time.Time) ([]*domain.Transaction, error)) *MockTransactionRepository_GetByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockTransactionRepository) GetByID(ctx context.Context, id int) (*domain.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTransactionRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockTransactionRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockTransactionRepository_GetByID_Call {
	return &MockTransactionRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTransactionRepository_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockTransactionRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockTransactionRepository_GetByID_Call) Return(_a0 *domain.Transaction, _a1 error) *MockTransactionRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_GetByID_Call) RunAndReturn(run func(context.Context, int) (*domain.Transaction, error)) *MockTransactionRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByType provides a mock function with given fields: ctx, transactionType, offset, limit
func (_m *MockTransactionRepository) GetByType(ctx context.Context, transactionType string, offset int, limit int) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, transactionType, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByType")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*domain.Transaction, error)); ok {
		return rf(ctx, transactionType, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*domain.Transaction); ok {
		r0 = rf(ctx, transactionType, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, transactionType, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByType'
type MockTransactionRepository_GetByType_Call struct {
	*mock.Call
}

// GetByType is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionType string
//   - offset int
//   - limit int
func (_e *MockTransactionRepository_Expecter) GetByType(ctx interface{}, transactionType interface{}, offset interface{}, limit interface{}) *MockTransactionRepository_GetByType_Call {
	return &MockTransactionRepository_GetByType_Call{Call: _e.mock.On("GetByType", ctx, transactionType, offset, limit)}
}

func (_c *MockTransactionRepository_GetByType_Call) Run(run func(ctx context.Context, transactionType string, offset int, limit int)) *MockTransactionRepository_GetByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockTransactionRepository_GetByType_Call) Return(_a0 []*domain.Transaction, _a1 error) *MockTransactionRepository_GetByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_GetByType_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*domain.Transaction, error)) *MockTransactionRepository_GetByType_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecentTransactions provides a mock function with given fields: ctx, limit
func (_m *MockTransactionRepository) GetRecentTransactions(ctx context.Context, limit int) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentTransactions")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*domain.Transaction, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*domain.Transaction); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetRecentTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecentTransactions'
type MockTransactionRepository_GetRecentTransactions_Call struct {
	*mock.Call
}

// GetRecentTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
func (_e *MockTransactionRepository_Expecter) GetRecentTransactions(ctx interface{}, limit interface{}) *MockTransactionRepository_GetRecentTransactions_Call {
	return &MockTransactionRepository_GetRecentTransactions_Call{Call: _e.mock.On("GetRecentTransactions", ctx, limit)}
}

func (_c *MockTransactionRepository_GetRecentTransactions_Call) Run(run func(ctx context.Context, limit int)) *MockTransactionRepository_GetRecentTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockTransactionRepository_GetRecentTransactions_Call) Return(_a0 []*domain.Transaction, _a1 error) *MockTransactionRepository_GetRecentTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_GetRecentTransactions_Call) RunAndReturn(run func(context.Context, int) ([]*domain.Transaction, error)) *MockTransactionRepository_GetRecentTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalByDateRange provides a mock function with given fields: ctx, start, end, transactionType
func (_m *MockTransactionRepository) GetTotalByDateRange(ctx context.Context, start time.Time, end time.Time, transactionType string) (float64, error) {
	ret := _m.Called(ctx, start, end, transactionType)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalByDateRange")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, string) (float64, error)); ok {
		return rf(ctx, start, end, transactionType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, string) float64); ok {
		r0 = rf(ctx, start, end, transactionType)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, string) error); ok {
		r1 = rf(ctx, start, end, transactionType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetTotalByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalByDateRange'
type MockTransactionRepository_GetTotalByDateRange_Call struct {
	*mock.Call
}

// GetTotalByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - transactionType string
func (_e *MockTransactionRepository_Expecter) GetTotalByDateRange(ctx interface{}, start interface{}, end interface{}, transactionType interface{}) *MockTransactionRepository_GetTotalByDateRange_Call {
	return &MockTransactionRepository_GetTotalByDateRange_Call{Call: _e.mock.On("GetTotalByDateRange", ctx, start, end, transactionType)}
}

func (_c *MockTransactionRepository_GetTotalByDateRange_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, transactionType string)) *MockTransactionRepository_GetTotalByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(string))
	})
	return _c
}

func (_c *MockTransactionRepository_GetTotalByDateRange_Call) Return(_a0 float64, _a1 error) *MockTransactionRepository_GetTotalByDateRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_GetTotalByDateRange_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, string) (float64, error)) *MockTransactionRepository_GetTotalByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTransactions provides a mock function with given fields: ctx, query, offset, limit
func (_m *MockTransactionRepository) SearchTransactions(ctx context.Context, query string, offset int, limit int) ([]*domain.Transaction, error) {
	ret := _m.Called(ctx, query, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for SearchTransactions")
	}

	var r0 []*domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*domain.Transaction, error)); ok {
		return rf(ctx, query, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*domain.Transaction); ok {
		r0 = rf(ctx, query, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, query, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_SearchTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTransactions'
type MockTransactionRepository_SearchTransactions_Call struct {
	*mock.Call
}

// SearchTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - offset int
//   - limit int
func (_e *MockTransactionRepository_Expecter) SearchTransactions(ctx interface{}, query interface{}, offset interface{}, limit interface{}) *MockTransactionRepository_SearchTransactions_Call {
	return &MockTransactionRepository_SearchTransactions_Call{Call: _e.mock.On("SearchTransactions", ctx, query, offset, limit)}
}

func (_c *MockTransactionRepository_SearchTransactions_Call) Run(run func(ctx context.Context, query string, offset int, limit int)) *MockTransactionRepository_SearchTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockTransactionRepository_SearchTransactions_Call) Return(_a0 []*domain.Transaction, _a1 error) *MockTransactionRepository_SearchTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_SearchTransactions_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*domain.Transaction, error)) *MockTransactionRepository_SearchTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, transaction
func (_m *MockTransactionRepository) Update(ctx context.Context, transaction *domain.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTransactionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *domain.Transaction
func (_e *MockTransactionRepository_Expecter) Update(ctx interface{}, transaction interface{}) *MockTransactionRepository_Update_Call {
	return &MockTransactionRepository_Update_Call{Call: _e.mock.On("Update", ctx, transaction)}
}

func (_c *MockTransactionRepository_Update_Call) Run(run func(ctx context.Context, transaction *domain.Transaction)) *MockTransactionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_Update_Call) Return(_a0 error) *MockTransactionRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.Transaction) error) *MockTransactionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
